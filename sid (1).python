{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "96990e57",
   "metadata": {},
   "source": [
    "# Introduction To Python\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9d3a8fad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "concatenation: python programming\n"
     ]
    }
   ],
   "source": [
    "s1='python '\n",
    "s2='programming'\n",
    "print('concatenation:',s1 + s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1d8abb46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello \n",
      " All\n"
     ]
    }
   ],
   "source": [
    "# print('Hellow \"All\" ')\n",
    "#print(\"Hello World !!\")\n",
    "#print('Hello All')\n",
    "print('Hello \\n All')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9d44960f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "a=10\n",
    "print(type(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6492b3ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "a=10.4\n",
    "print(type(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "693c68f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 20.2 Hello\n"
     ]
    }
   ],
   "source": [
    "a=10\n",
    "b=20.2\n",
    "c='Hello'\n",
    "print(a,b,c)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "581282c3",
   "metadata": {},
   "source": [
    "a,b = 5,2\n",
    "print('a+b:',a+b)\n",
    "print('a-b:',a-b)\n",
    "print('a*b:',a*b)\n",
    "print('a/b:',a/b)\n",
    "print('a//b:',a//b)\n",
    "print('a%b:',a%b)\n",
    "print('a**b:',a**b)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56799982",
   "metadata": {},
   "source": [
    "# Comparision Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f484b598",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a==b: False\n",
      "a>b: False\n",
      "a<b: True\n",
      "a>=b: False\n",
      "a<=b: True\n",
      "a<=b: True\n",
      "a!b: True\n"
     ]
    }
   ],
   "source": [
    "a,b = 10,20\n",
    "print('a==b:',a==b)\n",
    "print('a>b:',a>b)\n",
    "print('a<b:',a<b)\n",
    "print('a>=b:',a>=b)\n",
    "print('a<=b:',a<=b)\n",
    "print('a<=b:',a<=b)\n",
    "print('a!b:',a!=b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e557cba",
   "metadata": {},
   "source": [
    "# Logical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "aa42b775",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "a=10\n",
    "b=20\n",
    "print((a>b) or (a>10)) #\n",
    "print((a>b) and (a>10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "992ccb95",
   "metadata": {},
   "source": [
    "# Bitwise Operator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "40becd4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "11\n",
      "22\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "x = 11 # 1011\n",
    "y = 3  # 0011\n",
    "print(x & y) # and\n",
    "print(x | y) # or\n",
    "print(x << 1)# Left shift\n",
    "print(x >> 1)# right shift"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60367a88",
   "metadata": {},
   "source": [
    "# Membership Operators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0d2f3703",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "# int , not in\n",
    "# to check wheather items/value/element are present or not\n",
    "a= [1,2,3,4]\n",
    "print(5 in a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "210fd25b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "h\n",
      "y\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'python'"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1 = 'python'\n",
    "print(len(s1))\n",
    "print(min(s1))\n",
    "print(max(s1))\n",
    "s1.upper()\n",
    "s1.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "bdd2ae23",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 5\n"
     ]
    }
   ],
   "source": [
    "x = 5\n",
    "y = 3\n",
    "x,y = y,x\n",
    "print(x,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6bacd1d",
   "metadata": {},
   "source": [
    "# Find & Replace"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "087feedc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "1\n",
      "pyTHON\n",
      "1\n",
      "0\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "s1 = 'python'\n",
    "s2 = 'Hi'\n",
    "print(s1.find('thon')) # to find the string\n",
    "print(s1.count('o'))# to count the number of occurence\n",
    "print(s1.replace('thon','THON')) # to replace a string\n",
    "print(s1.find('y')) # to find the specfic Location\n",
    "print(s1.count('0',0,2)) # to count in the specific range\n",
    "print(s1==s2) # to compare two string"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32c613f6",
   "metadata": {},
   "source": [
    "# Repition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "417729d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'pythonpythonpython'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = 'python'\n",
    "x*3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6bf3dabe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2, 4, 2, 4]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = [2,4]\n",
    "x*2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "395c92b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[9, 4, 3]\n"
     ]
    }
   ],
   "source": [
    "r = [9,4,3]\n",
    "s = [4,5]\n",
    "\n",
    "#r.extend(s) # to extend a List\n",
    "#r.append(7) # to add a element \n",
    "#r.reverse()\n",
    "#r.sort()\n",
    "#r.insert(1,10)\n",
    "#print(sum(r))\n",
    "print(r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9301ca45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "h\n",
      "['h', 'n', 'o', 'p', 't', 'y']\n",
      "6\n",
      "Apple\n",
      "['Apple', 'banana', 'oranges']\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "x = 'python'\n",
    "print(min(x))\n",
    "print(sorted(x))\n",
    "print(len(x))\n",
    "y = ['oranges','banana','Apple']\n",
    "print(min(y))\n",
    "print(sorted(y))\n",
    "print(len(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36bd7806",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
